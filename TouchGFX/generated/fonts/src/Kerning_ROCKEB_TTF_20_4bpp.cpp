#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_ROCKEB_TTF_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0020, space], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0020, space], Kerning dist = -2)
    { 0x003A, -1 },  // (First char = [0x003A, colon], Second char = [0x0020, space], Kerning dist = -1)
    { 0x003B, -1 },  // (First char = [0x003B, semicolon], Second char = [0x0020, space], Kerning dist = -1)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0047, -1 },  // (First char = [0x0047, G], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x004E, -1 },  // (First char = [0x004E, N], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0077, -2 },  // (First char = [0x0077, w], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0047, -1 },  // (First char = [0x0047, G], Second char = [0x002E, period], Kerning dist = -1)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x002E, period], Kerning dist = -1)
    { 0x004E, -1 },  // (First char = [0x004E, N], Second char = [0x002E, period], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x002E, period], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0077, -2 },  // (First char = [0x0077, w], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0041, A], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0020, -1 },  // (First char = [0x0020, space], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0054, T], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0054, T], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0020, -2 },  // (First char = [0x0020, space], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0056, V], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0056, V], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0020, -1 },  // (First char = [0x0020, space], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0020, -2 },  // (First char = [0x0020, space], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x0065, e], Kerning dist = -2)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x006D, m], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x006E, n], Kerning dist = 1)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x006F, o], Kerning dist = -2)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0072, r], Kerning dist = 1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0075, u], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0076, v], Kerning dist = 1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006C, -1 },  // (First char = [0x006C, l], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0079, y], Kerning dist = 1)
};
